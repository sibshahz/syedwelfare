// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}


enum Role {
  ADMIN
  USER
  DONOR
  MEMBER
}

enum Status{
  APPROVED
  PENDING
  REJECTED
}
model User {
  id       String  @id @default(cuid())
  name     String?
  email    String @unique
  password String
  role     Role    @default(USER)
}

model Donor {
  id         String  @id @default(cuid())
  cnic       String? @unique
  name       String
  password   String?
  fatherName String?
  phone      String?
  address    String?
  city       String?
  email      String?

  role       Role    @default(DONOR)
  
  donations  Donation[]
  media      DonorMedia[]

  @@index([cnic,phone])
}

model DonorMedia {
  id           String @id 
  profilePic   String?
  cnicFront    String?
  cnicBack     String?
  donorId      String

  donor        Donor @relation(fields: [donorId], references: [id], onDelete: Cascade)

  @@index([donorId])
}
model Donation {
  id        String  @id @default(cuid())
  donorId   String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  donor     Donor   @relation(fields: [donorId], references: [id], onDelete: Cascade)

  @@index([donorId])
}

model Member {
  id         String  @id @default(cuid())
  cnic       String @unique
  name       String
  fatherName String?
  husbandName String?
  phone      String?
  address    String?
  city       String?
  deleted    Boolean @default(false)

  role       Role    @default(MEMBER)
  media      MemberMedia[]
  payments   MemberPayments[]
  memberStatus MemberStatus[]

  @@index([cnic,phone])
}

model MemberStatus{
  id        String  @id @default(cuid())
  memberId  String
  status    Status @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    Member  @relation(fields: [memberId], references: [id], onDelete: NoAction)

  @@index([memberId])
}

model YearlyPayment{
  id        String  @id @default(cuid())
  year      Int
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model YearlyDonation{
  id        String @id @default(cuid())
  year      Int
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberPayments {
  id        String  @id @default(cuid())
  memberId  String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
}
model MemberMedia {
  id           String @id 
  profilePic   String?
  cnicFront    String?
  cnicBack     String?
  memberId     String
  member       Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([memberId])
}
